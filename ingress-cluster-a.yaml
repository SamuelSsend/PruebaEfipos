# Despliegue de MySQL
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-cluster-a
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql-cluster-a
  template:
    metadata:
      labels:
        app: mysql-cluster-a
    spec:
      containers:
      - name: mysql
        image: mysql/mysql-server:5.7
        env:
        - name: MYSQL_ALLOW_EMPTY_PASSWORD
          value: "yes"
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-initdb
          mountPath: /docker-entrypoint-initdb.d
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-initdb
        configMap:
          name: efipos-database-cluster-a
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc-cluster-a
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  selector:
    app: mysql
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc-cluster-a
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

# Despliegue de efipos
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: efipos
spec:
  replicas: 1
  selector:
    matchLabels:
      app: efipos
  template:
    metadata:
      labels:
        app: efipos
    spec:
      initContainers:
      - name: wait-for-mysql
        image: busybox
        command: ['sh', '-c', 'until nc -z mysql 3306; do echo waiting for mysql; sleep 2; done;']
      containers:
      - name: efipos
        image: amarval073/efipos-imagen
        ports:
        - containerPort: 80
        env:
        - name: DB_CONNECTION
          value: "mysql"
        - name: DB_HOST
          value: "mysql"
        - name: DB_PORT
          value: "3306"
        - name: DB_DATABASE
          value: "plataforma_test"
        - name: DB_USERNAME
          value: "root"
        - name: DB_PASSWORD
          value: ""  # Contraseña vacía
---
apiVersion: v1
kind: Service
metadata:
  name: efipos
spec:
  selector:
    app: efipos
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: efipos-svc
spec:
  type: NodePort
  selector:
    app: efipos # Este es el app como se declara en el despliegue.
  ports:
    - name: http
      nodePort: 30080 # Este es el puerto disponible externamente. El valor de nodePort puede estar entre 30000-32767
      protocol: TCP
      port: 80 # Este es el puerto disponible para el clúster
      targetPort: 80 # Este es el puerto objetivo en el contenedor

# Ingress para efipos
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: efipos-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: efipos.local # Ajusta este host según sea necesario
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: efipos-svc
            port:
              number: 80

# Ingress específico para el clúster-a
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-cluster-a
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: cluster-a.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: efipos-svc
            port:
              number: 80